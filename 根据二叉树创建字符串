你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。

空节点则用一对空括号 "()" 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/construct-string-from-binary-tree


//保存最终结果
private StringBuilder sb = new StringBuilder();
public String tree2str(TreeNode t) {
    //左右子树都为空，都可以省略括号
    //左子树空，右子树非空，不可省略
    //左子树非空，右子树空，可以省略
    //先序遍历
    if (t == null) {
        return " ";
    }
    tree2strHelper(t);
    sb.deleteCharAt(0);
    sb.deleteCharAt(sb.length() - 1);
    return sb.toString();
}

private void tree2strHelper(TreeNode root) {
    if (root == null) {
        return;
    }
    //借助这个方法完成递归过程，先序遍历方式来递归s
    sb.append("(");
    sb.append(root.val);
    tree2strHelper(root.left);
    //左子树空，右子树非空，不可省略
    if (root.left == null && root.right != null) {
        sb.append("()");
    }
    tree2strHelper(root.right);
    sb.append(")");
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    private StringBuilder stringbuilder = new StringBuilder();
    public String tree2str(TreeNode t) {
        if (t == null) {
            return "";
        }
        tree2strHelper(t);
        stringbuilder.deleteCharAt(stringbuilder.length() - 1);
        return stringbuilder.toString();
    }
    
    public void tree2strHelper(TreeNode t) {
        if (t == null) {
            return;
        }
        if (stringbuilder.length() != 0) {
        stringbuilder.append("(");            
        }
        stringbuilder.append(t.val);
        tree2strHelper(t.left);
        if (t.left == null && t.right != null) {
            stringbuilder.append("()");
        }
        tree2strHelper(t.right);   
        stringbuilder.append(")");

        
    }
}
