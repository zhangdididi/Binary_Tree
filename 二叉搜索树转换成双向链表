/*
//使用中序遍历，就能够得到有序序列
//把相邻的元素互相指向，left 指向前一个元素，right 指向后一个元素
//1. 判定特殊情况，空树或者只有一个结点
//2. 递归左子树变成双向链表，并返回第一个结点
//3. 如果左侧链表有结点不为null ，当前左侧链表尾巴找到，
// 左侧链表的尾结点和当前root结点相互指向
//4. 递归将右子树也构造成双向链表，同时的到右子树链表第一个结点
//  把右侧链表的头结点和当前结点相互指向
// 返回整个链表头结点
*/
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/

public class Solution {
    public TreeNode Convert(TreeNode root) {
        //如果根结点为空，就返回null
        if (root == null) return null;
        //如果根结点左右子树都为空，就返回根结点
        if (root.left == null && root.right == null) {
            return root;
        }
        //转换左子树，找到左子树的末尾结点
        TreeNode left = Convert(root.left);
        TreeNode leftTail = left;
        while (leftTail != null && leftTail.right != null) {
            leftTail = leftTail.right;
        }
        //将根结点和左子树的末尾结点连接
        if (left != null) {
            leftTail.right = root;
            root.left = leftTail;
        }
        //再转换右子树，找到右子树的开头结点，和根结点相连
        TreeNode right = Convert(root.right);
        if (right != null) {
            right.left = root;
            root.right = right;
        }
        return left == null ? root : left;
    }
}
