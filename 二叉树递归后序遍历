/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 //递归方法
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        res.addAll(postorderTraversal(root.left));
        res.addAll(postorderTraversal(root.right));
        res.add(root.val);
        return res;
    }
}

//迭代方法
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if (root == null) return res;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curNode = root;
        TreeNode preNode = null;
        while (true) {
            while (curNode != null) {
                stack.push(curNode);
                curNode = curNode.left;
            }
            if (stack.isEmpty()) {
                break;
            }
            //拿到栈顶元素，先不取出，判断右子树是否存在，或者是否刚才被访问过
            TreeNode topNode = stack.peek();
            if (topNode.right == null || topNode.right == preNode) {
                stack.pop();
                res.add(topNode.val);
                preNode = topNode;
            } else {
                curNode = topNode.right;
            }
        } //end while(true)
        return res;
    }
}


public static void postOrder(TreeNode root) {
    if (root == null) return;
    Stack<TreeNode> stack = new Stack<>();
    TreeNode curr = root;
    TreeNode prev = null;
    while (true) {
        while (curr != null) {
            stack.push(curr);
            curr = curr.left;
        }
        if (stack.isEmpty()) {
            break;
        }
       TreeNode top = stack.peek();
        if (top.right == null || top.right == prev) {
            //说明该右节点已经被遍历到
            stack.pop();
            System.out.println(top.val);
            prev = top;
        } else {
            curr = top.right;
        }

    }
}
