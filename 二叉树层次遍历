
import java.util.ArrayList;
import java.util.List;

public class Test {
    
    static class TreeNode {
        public int val;
        public TreeNode left;
        public TreeNode right;

        public TreeNode(int val) {
            this.val = val;
        }
    }
    
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> levelOrder(TreeNode root) {
        //1. 先序遍历解决，递归时候参数上加上当前一个层数
        // 就可以根据层数知道当前节点往哪个数组放置
        if (root == null) {
            return null;
        }
        //正常二叉树从1开始计算， 为了和下标对应方便，从0开始
        helper(root, 0);
        return res;
    }
    
    private void helper(TreeNode root, int level) {
        //超出有效范围就新加一个
        if (level == res.size()) {
            //达到的第level 层还没有对应的数组，就需要创建一个新数组加入res
            res.add(new ArrayList<>());
            
        }
        res.get(level).add(root.val);
        if (root != null) {
            helper(root.left, level + 1);
        }
        if (root.right != null) {
            helper(root.right, level + 1);
        }
        
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    
    public List<List<Integer>> levelOrder(TreeNode root) {
        if (root == null) return res;
        helper(root, 0);
        return res;
    }
    
    public void helper(TreeNode root, int level) {
        //如果到达level层没有对应的数组，就新增加一个数组队列
        if (level == res.size()) res.add(new ArrayList<Integer>());
        res.get(level).add(root.val);
        if (root.left != null) helper(root.left, level + 1);
        if (root.right != null) helper(root.right, level + 1);
    }
}
