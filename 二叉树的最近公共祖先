private TreeNode lca = null;

public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    //1. 借助辅助方法，在 root 中递归查找p  和  q
    //设置辅助方法返回值，找到一个或者两个返回1， 没找到返回0
    //2. 递归在左子树中查找 + 递归在右子树中查找 + 对比根结点
    //3. 三个位置中找到两个节点，说明当前结点是要找的最近公共祖先
    if (root == null) {
        return null;
    }

    findNode(root, p, q);
    return lca;
}

private boolean findNode(TreeNode root, TreeNode p, TreeNode q) {
    if (root == null) {
        return false;
    }
    //递归在左子树尝试找p  q
    //找到为1  否则0
    int left = findNode(root.left, p, q) ? 1 : 0;
    //递归在右子树找 p  q
    int right = findNode(root.right,p, q) ? 1 : 0;
    //对比一下当前结点有没有找到, 比较身份
    int base = (root == p || root == q) ? 1 : 0;
    if (left + right + base >= 2) {
        //找到 lca ，当前root
        lca = root;
    }
    return (left + right + base) > 0;
}



public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    if (root == null) return root;
    if (p == root || q == root) return root;
    TreeNode leftNode = lowestCommonAncestor(root.left, p, q);
    TreeNode rightNode = lowestCommonAncestor(root.right, p, q);
    if (leftNode == null) return rightNode;
    if (rightNode == null) return leftNode;
    return root;
}
