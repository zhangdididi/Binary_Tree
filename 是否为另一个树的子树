/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    public boolean HasSubtree(TreeNode root1,TreeNode root2) {
        //先创建一个布尔类型的变量作为返回值
        boolean res = false;
        if (root1 != null && root2 != null) {
            //如果两个树根结点都不为空的话，就比对是否为另一个树的子树
            if (root1.val == root2.val) {
                res = isHaveTree(root1, root2);
            }
            //不相等的话就继续在左子树中找子树
            if (!res) {
                res = HasSubtree(root1.left, root2);
            }
            //然后在右子树中找子树
            if (!res) {
                res = HasSubtree(root1.right, root2);
            }
        }
        //不相等的话就继续在左子树中找子树
        //然后在右子树中找子树
        return res;
    }
    
    //使用一个方法来判断是否为子树
    private static boolean isHaveTree(TreeNode root1, TreeNode root2) {
        if (root2 == null) return true;
        if (root1 == null) return false;
        //如果根结点不相等，则说明肯定不是子树
        if (root1.val != root2.val) return false;
        //继续判断左子树和右子树是否为子结构
        return isHaveTree(root1.left, root2.left) && isHaveTree(root1.right, root2.right);
    }
}
