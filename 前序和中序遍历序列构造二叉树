/*
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。
假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，
则重建二叉树并返回
*/

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.Arrays;
public class Solution {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        if (pre.length == 0 || in.length == 0) {
            return null;
        }
        int root_val = pre[0];
        TreeNode root = new TreeNode(root_val);
        int index = 0;
        for (int i = 0; i < in.length; i++) {
            if (in[i] == root_val) {
                index = i;
                break;
            }
        }
        //找到index为根结点的下标
        int[] leftPre = Arrays.copyOfRange(pre, 1, index + 1);
        int[] leftIn = Arrays.copyOfRange(in, 0, index);
        root.left = reConstructBinaryTree(leftPre, leftIn);
        int[] rightPre = Arrays.copyOfRange(pre, index + 1, pre.length);
        int[] rightIn = Arrays.copyOfRange(in, index + 1, in.length);
        root.right = reConstructBinaryTree(rightPre, rightIn);
        return root;
    }
}



class Solution {
    private int index = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        index = 0;
        //递归过程中需要处理某个子树，[0, inOrder.length) 当前处理的子树对应的中序遍历结果是什么.
        return buildTreeHelper(preorder, inorder, 0, inorder.length);
    }
    private TreeNode buildTreeHelper(int[] preorder, int[] inorder,
                                     int inorderLeft, int inorderRight) {
        //先判定非法情况
        if (inorderLeft >= inorderRight) {
            //中序遍历是不存在的，是一个空子树
            return null;
        }
        if (index >= preorder.length) {
            return null;
        }
        //取出当前值来构建当前子树的根结点
        TreeNode root = new TreeNode(preorder[index]);
        index++;//取完这个结点再取下一个结点
        // 找到结点中序遍历的位置
        //pos 只要先序遍历和中序遍历序列是对的，不会出现-1的情况
        int pos = find(inorder, inorderLeft, inorderRight, root.val);
        root.left = buildTreeHelper(preorder, inorder, inorderLeft, pos);
        root.right = buildTreeHelper(preorder, inorder,pos + 1, inorderRight);
        return root;

    }

    private int find(int[] inorder, int inorderLeft, int inorderRight, int val) {
        for (int i = inorderLeft; i < inorderRight; i++) {
            if (inorder[i] == val) {
                return i;
            }
        }
        return -1;
    }
}

